[General]
network = cellularroundrobin.CellularNetwork
sim-time-limit = 100s
warmup-period = 10s
repeat = 30
seed-set = ${repetition}

# Record all statistics
**.statistic-recording = true
**.scalar-recording = true
**.vector-recording = true

# Result file naming
output-scalar-file = ${resultdir}/${configname}-${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}-${iterationvars}-${repetition}.vec

# Common parameters
*.numUsers = 10
*.baseStation.numResourceBlocks = 25
*.baseStation.ttiDuration = 1ms
*.baseStation.schedulingAlgorithm = "RoundRobin"

# RNG mapping for reproducibility
# Each user gets 3 RNG streams: arrivals (base+0), sizes (base+1), CQI (base+2)
*.user[*].arrivalRngId = 3*parentIndex + 0
*.user[*].sizeRngId = 3*parentIndex + 1
*.user[*].cqiRngId = 3*parentIndex + 2

# Note: CQI is now updated every TTI, no need for cqiUpdateInterval

#------------------------------------------------------------------------------
# Scenario 1: Exponential arrivals with uniform CQI
#------------------------------------------------------------------------------
[Config Scenario1]
description = "Uniform traffic and channel conditions"

# Uniform exponential arrivals
*.user[*].arrivalRate = uniform(1.0, 3.0)  # packets/second
*.user[*].packetSize = intuniform(100, 1400)  # bytes (max fits at CQI=1)
*.user[*].arrivalPattern = "exponential"

# Uniform CQI distribution
*.user[*].cqiModel = "uniform"
*.user[*].cqi = intuniform(1, 15)

#------------------------------------------------------------------------------
# Scenario 2: Binomial CQI with user groupings
#------------------------------------------------------------------------------
[Config Scenario2]
description = "Grouped users with binomial channel quality"

# Group users by channel quality
*.user[0..2].channelGroup = "good"     # Near base station
*.user[3..6].channelGroup = "medium"   # Medium distance
*.user[7..9].channelGroup = "poor"     # Cell edge

# Binomial CQI modeling
*.user[*].cqiModel = "binomial"
*.user[0..2].binomialN = 15
*.user[0..2].binomialP = 0.8   # High success rate
*.user[3..6].binomialN = 10
*.user[3..6].binomialP = 0.6   # Medium success rate
*.user[7..9].binomialN = 5
*.user[7..9].binomialP = 0.4   # Low success rate

# Variable traffic patterns based on user group
*.user[0..2].arrivalRate = 2.0Hz   # Higher rate for good channel users
*.user[0..2].packetSize = intuniform(500, 1400)
*.user[3..6].arrivalRate = 1.5Hz   # Medium rate
*.user[3..6].packetSize = intuniform(300, 1000)
*.user[7..9].arrivalRate = 1.0Hz   # Lower rate for poor channel users
*.user[7..9].packetSize = intuniform(100, 500)

#------------------------------------------------------------------------------
# Validation Tests
#------------------------------------------------------------------------------

# Test 1: Single user saturation test with fixed CQI
[Config ValidationSingleUser]
description = "Single user saturation test with fixed CQI and packet size"
sim-time-limit = 60s
warmup-period = 10s

*.numUsers = 1
*.user[0].cqiModel = "fixed"
*.user[0].cqi = ${cqi=1,5,10,15}  # Test different CQI values
*.user[0].packetSize = 1000B  # Fixed packet size
*.user[0].arrivalRate = ${arrivalRate=0.5,1.0,2.0,3.0,4.0,5.0,10.0,20.0,50.0}Hz
*.user[0].arrivalPattern = "exponential"

# Test 2: Multi-user throughput scaling
[Config ValidationMultiUser]
description = "Throughput scaling with different number of users"
sim-time-limit = 60s
warmup-period = 10s

*.numUsers = ${numUsers=1,2,5,10,15,20}
*.user[*].cqiModel = "fixed"
*.user[*].cqi = 10  # Fixed medium CQI
*.user[*].packetSize = 500B  # Fixed packet size
*.user[*].arrivalRate = 2.0Hz  # Fixed arrival rate
*.user[*].arrivalPattern = "exponential"

# Test 3: Maximum throughput test
[Config ValidationMaxThroughput]
description = "Maximum system throughput with optimal conditions"
sim-time-limit = 60s
warmup-period = 10s

*.numUsers = ${numUsers=1,5,10}
*.user[*].cqiModel = "fixed"
*.user[*].cqi = 15  # Maximum CQI
*.user[*].packetSize = 93B  # Exactly one RB at CQI 15
*.user[*].arrivalRate = 100Hz  # Very high rate to ensure saturation
*.user[*].arrivalPattern = "exponential"

#------------------------------------------------------------------------------
# Warmup Period Detection
#------------------------------------------------------------------------------
[Config WarmupDetection]
description = "Determine appropriate warmup period"
extends = Scenario1
sim-time-limit = 200s
warmup-period = 0s  # No warmup to see full evolution
**.vector-recording = true
**.result-recording-modes = all

#------------------------------------------------------------------------------
# Simulation Time Limit Detection
#------------------------------------------------------------------------------
[Config SimTimeLimitDetection]
description = "Determine appropriate simulation time limit"
extends = Scenario1
sim-time-limit = ${simTime=50s,100s,200s,300s,500s}
warmup-period = 10s

#------------------------------------------------------------------------------
# Parameter Study Configurations
#------------------------------------------------------------------------------
[Config ParameterStudy]
extends = Scenario1
description = "Study impact of different parameters"

# Vary number of users
*.numUsers = ${numUsers=5,10,15,20}

# Vary arrival rates
*.user[*].arrivalRate = ${arrivalRate=0.5,1.0,2.0,3.0,4.0}

#------------------------------------------------------------------------------
# High Load Configuration
#------------------------------------------------------------------------------
[Config HighLoad]
extends = Scenario1
description = "High traffic load scenario"

*.user[*].arrivalRate = uniform(3.0, 5.0)  # Higher arrival rates
*.user[*].packetSize = intuniform(1000, 1400)  # Larger packets

#------------------------------------------------------------------------------
# Low Load Configuration
#------------------------------------------------------------------------------
[Config LowLoad]
extends = Scenario1
description = "Low traffic load scenario"

*.user[*].arrivalRate = uniform(0.1, 0.5)  # Lower arrival rates
*.user[*].packetSize = intuniform(100, 500)  # Smaller packets

#------------------------------------------------------------------------------
# Debug Configuration
#------------------------------------------------------------------------------
[Config Debug]
extends = Scenario1
description = "Debug configuration with detailed output"

sim-time-limit = 10s
repeat = 1
**.debug = true
**.eventlog-recording = true
cmdenv-express-mode = false
cmdenv-event-banners = true

# Limit to fewer users for easier debugging
*.numUsers = 3
*.user[*].arrivalRate = 1.0Hz
*.user[*].packetSize = 500B
*.user[*].cqiModel = "fixed"
*.user[*].cqi = 10